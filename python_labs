# Write a program whose input is two integers. Output the first integer and 
# subsequent increments of 5 as long as the value is less than or equal to 
# the second integer.

# Ex: If the input is:

# -15
# 10
# the output is:

# -15 -10 -5 0 5 10 
# Ex: If the second integer is less than the first as in:

# 20
# 5
# the output is:

# Second integer can't be less than the first.
# For coding simplicity, output a space after every integer, including the 
# last. End the output with a newline.

# Read integers from user
first_integer = int(input("Enter the first integer: "))
second_integer = int(input("Enter the second integer: "))

# Check if the second integer is less than the first
if second_integer < first_integer:
    print("Second integer can't be less than the first.")
else:
    # Print values from first_integer to second_integer, in increments of 5
    for number in range(first_integer, second_integer + 1, 5):
        print(number, end=' ')
    print()  # Print newline at the end

# Write a program that takes in a line of text as input, and outputs that line 
# of text in reverse. The program repeats, ending when the user enters "Done", 
# "done", or "d" for the line of text.

# Ex: If the input is:

# Hello there
# Hey
# done
# then the output is:

# ereht olleH
# yeH

while True:
    text = input("Enter text: ")
    if text.lower() in ['done', 'd']:
        break
    print(text[::-1])

# Write a program that takes in an integer in the range 11-99 (inclusive) as 
# input. The output of the program is a countdown starting from the input 
# integer until an integer where both digits are identical.

# Ex: If the input is:

# 93
# the output is:

# 93
# 92
# 91
# 90
# 89
# 88
# Ex: If the input is:

# 11
# the output is:

# 11
# Ex: If the input is:

# 9
# or any value not between 11 and 99 (inclusive), the output is:

# Input must be 11-99
# Use a while loop. Compare the digits; do not write a large if-else for all 
# possible same-digit numbers (11, 22, 33, â¦, 99), as that approach would be 
# cumbersome for larger ranges.

def countdown_with_same_digits(start):
    if not (11 <= start <= 99):
        return "Input must be 11-99"

    while True:
        tens = start // 10
        ones = start % 10
        print(start)
        if tens == ones:
            break
        start -= 1

# Example usage:
number = int(input("Enter a number between 11 and 99: "))
result = countdown_with_same_digits(number)
if result:
    print(result)

# Write a program that reads a list of integers into a list as long as the 
# integers are greater than zero, then outputs the smallest and largest integers 
# in the list.

# Ex: If the input is:

# 10
# 5
# 3
# 21
# 2
# -6
# the output is:

# 2 and 21
# You can assume that the list of integers will have at least 2 values.

def read_integers():
    integers = []
    while True:
        number = int(input("Enter a positive integer (or a non-positive to stop): "))
        if number <= 0:
            break
        integers.append(number)

    if integers:  # Check if the list is not empty
        smallest = min(integers)
        largest = max(integers)
        print(f"{smallest} and {largest}")

# Example usage
read_integers()

# Write a program that first gets a list of integers from input. The input begins with 
# an integer indicating the number of integers that follow. Then, get the last value 
# from the input, which indicates a threshold. Output all integers less than or equal 
# to that last threshold value.

# Ex: If the input is:

# 5
# 50
# 60
# 140
# 200
# 75
# 100
# the output is:

# 50,60,75,
# The 5 indicates that there are five integers in the list, namely 50, 60, 140, 200, 
# and 75. The 100 indicates that the program should output all integers less than or 
# equal to 100, so the program outputs 50, 60, and 75.

# For coding simplicity, follow every output value by a comma, including the last one.

# Such functionality is common on sites like Amazon, where a user can filter results

def filter_integers_below_threshold():
    n = int(input("Enter the number of integers: "))  # Read the number of integers to expect
    numbers = []
    
    # Read the n integers
    for _ in range(n):
        number = int(input("Enter an integer: "))
        numbers.append(number)
    
    # Read the threshold
    threshold = int(input("Enter the threshold value: "))
    
    # Output integers less than or equal to the threshold, followed by a comma
    for number in numbers:
        if number <= threshold:
            print(number, end=',')

# Example usage
filter_integers_below_threshold()

# One lap around a standard high-school running track is exactly 0.25 miles. Define 
# a function named laps_to_miles that takes a number of laps as a parameter, and 
# returns the number of miles. Then, write a main program that takes a number of 
# laps as an input, calls function laps_to_miles() to calculate the number of miles, 
# and outputs the number of miles.

# Output each floating-point value with two digits after the decimal point, which 
# can be achieved as follows:
# print(f'{your_value:.2f}')

# Ex: If the input is:

# 7.6
# the output is:

# 1.90
# Ex: If the input is:

# 2.2
# the output is:

# 0.55
# The program must define and call the following function:
# def laps_to_miles(user_laps)

# Function to convert laps to miles
def laps_to_miles(user_laps):
    return user_laps * 0.25

if __name__ == '__main__':
    # Read the number of laps from user input
    user_laps = float(input("Enter the number of laps: "))
    
    # Call the function to calculate miles
    miles = laps_to_miles(user_laps)
    
    # Output the result formatted to two decimal places
    print(f'{miles:.2f}')

# Write a function driving_cost() with input parameters miles_per_gallon, 
# dollars_per_gallon, and miles_driven, that returns the dollar cost to drive 
# those miles. All items are of type float. The function called with arguments 
# (20.0, 3.1599, 50.0) returns 7.89975.

# Define that function in a program whose inputs are the car's miles per 
# gallon and the price of gas in dollars per gallon (both float). Output the 
# gas cost for 10 miles, 50 miles, and 400 miles, by calling your driving_cost() 
# function three times.

# Output each floating-point value with two digits after the decimal point, 
# which can be achieved as follows:
# print(f'{your_value:.2f}')

# Ex: If the input is:

# 20.0
# 3.1599
# the output is:

# 1.58
# 7.90
# 63.20
# Your program must define and call a function:
# def driving_cost(miles_per_gallon, dollars_per_gallon, miles_driven)

# Function to calculate driving cost
def driving_cost(miles_per_gallon, dollars_per_gallon, miles_driven):
    return (miles_driven / miles_per_gallon) * dollars_per_gallon

if __name__ == '__main__':
    # Input for miles per gallon and dollars per gallon
    miles_per_gallon = float(input("Enter the car's miles per gallon: "))
    dollars_per_gallon = float(input("Enter the price of gas per gallon: "))
    
    # Calculating costs for different distances
    cost_for_10_miles = driving_cost(miles_per_gallon, dollars_per_gallon, 10.0)
    cost_for_50_miles = driving_cost(miles_per_gallon, dollars_per_gallon, 50.0)
    cost_for_400_miles = driving_cost(miles_per_gallon, dollars_per_gallon, 400.0)
    
    # Output the results formatted to two decimal places
    print(f'{cost_for_10_miles:.2f}')
    print(f'{cost_for_50_miles:.2f}')
    print(f'{cost_for_400_miles:.2f}')

# In computer animation, a "jiffy" is commonly defined as 1/100th of a second. Define a function named jiffies_to_seconds that takes the number of "jiffies" as a parameter, and returns the number of seconds. Then, write a main program that reads the number of jiffies (float) as an input, calls function jiffies_to_seconds() with the input as argument, and outputs the number of seconds.

# Output each floating-point value with three digits after the decimal point, which can be achieved as follows:
# print(f'{your_value:.3f}')

# Ex: If the input is:

# 15.25
# the output is:

# 0.152
# The program must define and call the following function:
# def jiffies_to_seconds(user_jiffies)

def jiffies_to_seconds(user_jiffies):
    # Convert jiffies to seconds
    return user_jiffies / 100.0

if __name__ == '__main__':
    # Read input from the user
    user_input = float(input())
    # Call the function and store the result
    seconds = jiffies_to_seconds(user_input)
    # Output the result formatted to three decimal places
    print(f'{seconds:.3f}')

# Define a function called exact_change that takes the total change amount in cents and calculates the change using the fewest coins. The coin types are pennies, nickels, dimes, and quarters. Then write a main program that reads the total change amount as an integer input, calls exact_change(), and outputs the change, one coin type per line. Use singular and plural coin names as appropriate, like 1 penny vs. 2 pennies. Output "no change" if the input is 0 or less.

# Ex: If the input is:

# 0 
# (or less), the output is:

# no change
# Ex: If the input is:

# 45
# the output is:

# 2 dimes 
# 1 quarter
# Your program must define and call the following function. The function exact_change() should return a tuple containing num_pennies, num_nickels, num_dimes, and num_quarters.
# def exact_change(user_total)

def exact_change(user_total):
    quarters = user_total // 25
    user_total %= 25
    
    dimes = user_total // 10
    user_total %= 10
    
    nickels = user_total // 5
    user_total %= 5
    
    pennies = user_total
    
    return (pennies, nickels, dimes, quarters)

def main():
    total_cents = int(input())
    
    if total_cents <= 0:
        print("no change")
    else:
        pennies, nickels, dimes, quarters = exact_change(total_cents)
        if pennies > 0:
            print(f"{pennies} penn{'ies' if pennies > 1 else 'y'}") 
        if nickels > 0:
            print(f"{nickels} nickel{'s' if nickels > 1 else ''}")
        if dimes > 0:
            print(f"{dimes} dime{'s' if dimes > 1 else ''}") 
        if quarters > 0:
            print(f"{quarters} quarter{'s' if quarters > 1 else ''}")      





if __name__ == "__main__":
    main()

